class Solution{

	public:
	int m=1e9+7;
    int solve(int i,int n,int target,int arr[],vector<vector<int>>&dp){
        //if(target==0)return 1;
        if(i==0){
            if(arr[0]==0&&target==0)return 2;
            if(arr[0]==target||target==0)return 1;
            else return 0;
        }
        if(dp[i][target]!=-1)return dp[i][target];
        int notpick=solve(i-1,n,target,arr,dp);
        int pick=0;
        if(arr[i]<=target)pick=solve(i-1,n,target-arr[i],arr,dp);
        dp[i][target]=(pick%m+notpick%m)%m;
        
    }
	int perfectSum(int arr[], int n, int sum)
	{            
	    //vector<vector<int>>dp(n,vector<int>(sum+1,-1));
	    //return solve(n-1,n,sum,arr,dp);
        // Your code goes here
       // sort(arr,arr+n);
         vector<vector<int>>dp(n,vector<int>(sum+1,0));
         for(int i=0;i<n;i++)dp[i][0]=1;
         if(arr[0]==0)dp[0][0]=2;
         else dp[0][0]=1;
         if(arr[0]!=0&&arr[0]<=sum)dp[0][arr[0]]=1;
         
         for(int i=1;i<n;i++){
             for(int target=0;target<=sum;target++){
                 int notpick=dp[i-1][target];
                 int pick=0;
                 if(arr[i]<=target)pick=dp[i-1][target-arr[i]];
                 dp[i][target]=(pick%m+notpick%m)%m;
                 
             }
         }
         return dp[n-1][sum];
	}
	  
};

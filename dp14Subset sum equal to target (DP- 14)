class Solution{   
public:
      int solve(int i,int target,vector<int>&arr,vector<vector<int>>&dp){
          if(target==0)return 1;
          if(i==0){
              if(arr[i]==target)return 1;
              else return 0;
          }
          if(dp[i][target]!=-1)return dp[i][target];
          int pick=0;
          if(arr[i]<=target){
              pick=solve(i-1,target-arr[i],arr,dp);
          }
          int notpick=solve(i-1,target,arr,dp);
          
          return dp[i][target]=pick+notpick;
      }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        int n=arr.size();
       // vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        //return solve(n-1,sum,arr,dp);
        vector<vector<bool>>dp(n,vector<bool>(sum+1,0));
        for(int i=0;i<n;i++)dp[i][0]=true;
        dp[0][arr[0]]=true;
        for(int i=1;i<n;i++){
            for(int target=1;target<=sum;target++){
                bool nottake=dp[i-1][target];
                bool take=false;
                if(arr[i]<=target)take=dp[i-1][target-arr[i]];
                dp[i][target]=take||nottake;
                
                
            }
        }
        return dp[n-1][sum];
    }
};

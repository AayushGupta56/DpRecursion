class Solution {
public:
int solve(int i,int target,vector<int>&arr, vector<vector<int>>&dp){
           if(i==0){
               if((target%arr[0])==0)return target/arr[0];
               else return 1e9;
           }
           
          if(dp[i][target]!=-1)return dp[i][target];
          
          int notpick=0+solve(i-1,target,arr,dp);
          int pick=INT_MAX;
          if(arr[i]<=target) pick=1+solve(i,target-arr[i],arr,dp);
          
          return dp[i][target]=min(pick,notpick);
           
           
           
       }
    int coinChange(vector<int>& arr, int target) {
          int n=arr.size(); 
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        if(target==0)return 0;
        int ans= solve(n-1,target,arr,dp);
        if(ans>=1e9)return -1;
        else return ans;
    }
};

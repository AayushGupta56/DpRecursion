class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int solve(int i,int W,int wt[],int val[], vector<vector<int>>&dp){
        
        if(i==0){
            if(wt[0]<=W)return val[0];
            else return 0;
        }
        
        if(dp[i][W]!=-1)return dp[i][W];
        int nottake=solve(i-1,W,wt,val,dp);
        int take=INT_MIN;
        if(wt[i]<=W) take=val[i]+solve(i-1,W-wt[i],wt,val,dp);
        return dp[i][W]=max(take,nottake);
    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       //vector<vector<int>>dp(n,vector<int>(W+1,-1));
       //return solve(n-1,W,wt,val,dp);
       
       vector<vector<int>>dp(n,vector<int>(W+1,0));
       for(int i=wt[0];i<=W;i++)dp[0][i]=val[0];
       
       for(int i=1;i<n;i++){
           for(int weight=0;weight<=W;weight++){
               int nottake=dp[i-1][weight];
               int take=INT_MIN;
               if(wt[i]<=weight)take=val[i]+dp[i-1][weight-wt[i]];
               dp[i][weight]=max(take,nottake);
               
           }
       }
       
       
       return dp[n-1][W];
       
    }
};

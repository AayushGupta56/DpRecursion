class Solution {
public:
bool solve(int i,int target,vector<int>&arr,vector<vector<int>>&dp){
          if(target==0)return 1;
          if(i==0){
              if(arr[i]==target)return 1;
              else return 0;
          }
          if(dp[i][target]!=-1)return dp[i][target];
          int pick=0;
          if(arr[i]<=target){
              pick=solve(i-1,target-arr[i],arr,dp);
          }
          int notpick=solve(i-1,target,arr,dp);
          
          return dp[i][target]=pick|notpick;
      }
    bool canPartition(vector<int>& arr) {
        int n=arr.size();int target=0;
       for(int i=0;i<n;i++)target+=arr[i];
       if(target%2==1)return false;
       else {
             target=target/2;
        vector<vector<int>>dp(n,vector<int>(target+1,-1));
        return solve(n-1,target,arr,dp);

       }

    }
};

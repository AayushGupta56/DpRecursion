class Solution {
  public:
    // Function to detect cycle in an undirected graph.
   bool bfs(int node,int parent,vector<int>&vis,vector<int> adj[]){
       queue<pair<int,int>>q;
       q.push({node,parent});vis[node]=1;
       while(q.empty()==false){
           int node=q.front().first;
           int parent=q.front().second;
           q.pop();
           for(auto it:adj[node]){
               if(vis[it]==0){
                   q.push({it,node});vis[it]=1;
               }
               else if(vis[it]==1&&it!=parent)return true;
           }
           
           
       }
       return false;
       
   }
   bool isCycle(int n, vector<int> adj[]) {
        // Code here
        vector<int>vis(n,0);
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                if(bfs(i,-1,vis,adj)==true)return true;
            }
        }
        return false;
    }
};

  public:
  void dfs(int i,vector<pair<int,int>>adj[],vector<int>&vis,stack<int>&ans){
      vis[i]=1;
      for(auto it:adj[i]){
          if(vis[it.first]==0){
              dfs(it.first,adj,vis,ans);
          }
      }
      
      ans.push(i);
      
      
  }
     vector<int> shortestPath(int n,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>>adj[n];
        for(auto it:edges){
            adj[it[0]].push_back({it[1],it[2]});
        }
        stack<int>ans;
        vector<int>vis(n,0);
        for(int i=0;i<n;i++){
            if(vis[i]==0){
                dfs(i,adj,vis,ans);
            }
        }
        
        vector<int>dis(n,1e9);
        
        dis[0]=0;
        while(ans.empty()==false){
            int node=ans.top();ans.pop();
            for(auto it:adj[node]){
                if(dis[node]+it.second<dis[it.first]){
                    dis[it.first]=dis[node]+it.second;
                }
                
            }
        }
        for(int i=0;i<n;i++){
            if(dis[i]==1e9)dis[i]=-1;
        }
        return dis;
    }
};
